// Code generated by MockGen. DO NOT EDIT.
// Source: backend-svc-template/core (interfaces: BeerStorage)

// Package mocks is a generated GoMock package.
package mocks

import (
	domain "backend-svc-template"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockBeerStorage is a mock of BeerStorage interface.
type MockBeerStorage struct {
	ctrl     *gomock.Controller
	recorder *MockBeerStorageMockRecorder
}

// MockBeerStorageMockRecorder is the mock recorder for MockBeerStorage.
type MockBeerStorageMockRecorder struct {
	mock *MockBeerStorage
}

// NewMockBeerStorage creates a new mock instance.
func NewMockBeerStorage(ctrl *gomock.Controller) *MockBeerStorage {
	mock := &MockBeerStorage{ctrl: ctrl}
	mock.recorder = &MockBeerStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBeerStorage) EXPECT() *MockBeerStorageMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockBeerStorage) Add(arg0 *domain.Beer) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Add indicates an expected call of Add.
func (mr *MockBeerStorageMockRecorder) Add(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockBeerStorage)(nil).Add), arg0)
}

// Delete mocks base method.
func (m *MockBeerStorage) Delete(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockBeerStorageMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockBeerStorage)(nil).Delete), arg0)
}

// Edit mocks base method.
func (m *MockBeerStorage) Edit(arg0 *domain.Beer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Edit", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Edit indicates an expected call of Edit.
func (mr *MockBeerStorageMockRecorder) Edit(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Edit", reflect.TypeOf((*MockBeerStorage)(nil).Edit), arg0)
}

// Get mocks base method.
func (m *MockBeerStorage) Get(arg0 string) (*domain.Beer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(*domain.Beer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockBeerStorageMockRecorder) Get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockBeerStorage)(nil).Get), arg0)
}

// List mocks base method.
func (m *MockBeerStorage) List() ([]*domain.Beer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List")
	ret0, _ := ret[0].([]*domain.Beer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockBeerStorageMockRecorder) List() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockBeerStorage)(nil).List))
}
